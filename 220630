# DTO

- Data Transfer(To) Object
- 왜 필요한가? → 로직이 없는 순수한 객체 (getter, setter만 존재)
- 이름, 아이디, 이메일과 같은 데이터들을 담을 객체인 DTO가 필요하기 때문
- 데이터 베이스에서 어떤 데이터를 받을지에 대한 DTO가 필요함
- → 담고, 꺼내어 사용하기 위한 DTO가 필요함
- orm이 있다면? →(DB에서 entity 객체를 받아옴)
    - orm이 model 객체를 관리함(orm에 의해 entity의 값을 변경하면 DB에 자동 반영된다는 의미)
    - ORM에 의해 관리를 하는 로직을 거치기 때문에
- orm이 없다면→ DB에서 DTO 객체를 받음

# Entity

- 클래스(테이블) 그 자체
- 하나의 row
- ex) 김형진, khj@gmail.com

# Attribute

- name, email과 같음

# Transaction

- 일련의 작업을 하나의 묶음으로써 처리한다. (ex. 내통장 +1000, 니통장-1000)
- 에러가 발생했다면 묶음 모두가 반영되지 않아야함(원자성)
- 데이터 베이스에도 동일하게 값을 가지고 있어야 한다(일관성)
- 트렌젝션 수행 중 다른 요소가 방해해서는 안됨(독립성)
- 성공적으로 트렌젝션이 종료되면 서버가 망가지더라도 DB에는 그대로 반영되어야 함(영속성)
- 결제 이벤트, 경품응모 이벤트, 포인트 적립 이벤트, 등급 변경 이벤트 → 이벤트를 트렌젝션으로 묶음

# REST API

- 자원을 URL로 표현
- GET(리소스 조회), POST(리소스 등록/추가), PUT(리소스 수정, 전체 변경), PATCH(리소스 수정, 일부 변경), DELETE(리소스 삭제), OPTION(어떤 옵션를 지원하는지 알려줌)

# Cross Origin Resource Sharing

- SOP(Same Origin Policy) : 같은 출처에서만 허용
    - ex) naver에서 naver서버가 아닌 kakao api를 사용하는것 (허용 x)

⇒ 다른 출처를 허용하기위해 CORS 사용

- CORS → 허용할것을 미리 정의해 놓으면 허용해 주겠다는 의미
    - 왜 발생? 서버에서 허용된 출처만 사용하겠다 하기 위해
- preflight
- 브라우저 → 사용자 → 사용자는 CORS에 따른 결과를 보게됨
- 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fc8beed8-2796-4897-80b2-2ca075476b71/Untitled.png)

- 프로토콜,  호스트주소, 포트번호 중 달라지는게 있으면 다른출처가됨
